name: Spring Boot Application to EC2

# 워크플로우가 실행될 트리거 조건을 설정
on:
  # main 브랜치로 코드가 푸시될 때 실행
  push:
    branches:
      - main
  # main 브랜치로 PR이 병합될 때 (pull request가 closed 될 때) 실행
  pull_request:
    branches:
      - main
    types:
      - closed

# 워크플로우에 포함된 작업 (build 작업과 deploy 작업)
jobs:
  build:
    # 빌드를 실행할 환경은 최신 Ubuntu로 설정
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃 (현재 레포지토리의 코드를 가져옴)
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Java 17 환경 설정 (JDK 17 설치)
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt' # 사용할 JDK 배포판

      # 3. gradlew 실행 권한 설정
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      # 4. Gradle을 사용하여 프로젝트를 빌드 (테스트는 제외 - `-x test` 옵션 사용)
      # 테스트를 실행하지 않으려면 -x test 사용, 테스트 포함 시 이 옵션 제거 가능
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 5. Docker Hub에 로그인 (GitHub Secrets에 저장된 Docker Hub 사용자명과 비밀번호를 사용)
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # 6. Docker 이미지 빌드 (Docker Hub 사용자명과 함께 'dcrw:latest' 태그로 이미지 생성)
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/dcrw:latest .

      # 7. 빌드된 Docker 이미지를 Docker Hub에 푸시 (푸시할 때 'latest' 태그로 지정)
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/dcrw:latest

  deploy:
    # 배포 작업 역시 최신 Ubuntu 환경에서 실행
    runs-on: ubuntu-latest
    # deploy 작업은 build 작업이 완료된 후에만 실행되도록 설정
    needs: build

    steps:
      # 1. EC2 서버에 SSH를 통해 접속 (Secrets에 저장된 IP 주소, 사용자명, SSH 키 사용)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.EC2_IP }}     # EC2 인스턴스의 IP 주소
          username: ${{ secrets.EC2_USER }} # EC2 인스턴스의 SSH 사용자명 (보통 'ec2-user')
          key: ${{ secrets.EC2_KEY }}     # GitHub Secrets에 저장된 EC2 인스턴스의 SSH 키
          port: 22                       # EC2 SSH 연결 포트 (기본값: 22)
          debug: true
          script: |                      # EC2에 접속 후 실행할 스크립트
            # 2. 최신 Docker 이미지를 Docker Hub에서 EC2 서버로 가져옴
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/dcrw:latest
            # 3. 기존에 실행 중인 Docker 컨테이너 중지 (없으면 에러를 피하기 위해 || true 사용)
            docker stop dcrw || true
            # 4. 기존 컨테이너 삭제 (없으면 에러를 피하기 위해 || true 사용)
            docker rm dcrw || true
            # 5. 새로운 Docker 컨테이너 실행 (80 포트에서 외부로 접근 가능, 컨테이너 내부에서는 8080 포트를 사용)
            docker run -d --name dcrw -p 80:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/dcrw:latest
